package analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;

parser code



{:


    
    // listas que nos van a servir
    public static LinkedList<conjunto> conjuntos = new LinkedList<conjunto>(); 
    public static LinkedList<RegExp> expresiones = new LinkedList<RegExp>(); 
    public static LinkedList<cadena> cadenas = new LinkedList<cadena>(); 
    public static LinkedList<TError> errores = new LinkedList<TError>();

    

    // esta función nata de la herramienta, manda a llamar todos los errores sintacticos
    // necesita un objeto simbolo
   
    public void syntax_error(Symbol s)
    {        

        //obtenemos los valores de los parámetros del objeto s
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
      
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        // error de tipo sintáctico
        TError tmp = new TError("Sintactico",lexema,"Caracter no esperado",fila,columna);
        errores.add(tmp);
        
    }


    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores, se reporta y termina el análisis
    // en caso de que se pueda recurer este no saldrá
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
        TError tmp = new TError("Sintactico",lexema, "Caracter no esperado",fila,columna);
        errores.add(tmp);   
    }
:}

terminal palabra_reservada;
terminal delimitadores;
terminal comentario_unilinea;
terminal comentario_multilinea;
terminal cadena;
terminal asignacion;
terminal id;
terminal conjunto;
terminal punto_y_coma;
terminal llave_a;
terminal llave_c;
terminal punto;
terminal dos_puntos;
terminal asterisco;
terminal o_logico;
terminal mas;
terminal duda;

non terminal INICIO, E;
start with INICIO;

INICIO::= llave_a INICIO llave_c  {:System.out.println("Fin de analisis de entrada");:}
        

        |palabra_reservada dos_puntos id:a asignacion conjunto:b punto_y_coma INICIO {:
                                        conjunto nuevo = new conjunto("cadena", a.toString(), b.toString());
                                        conjuntos.add(nuevo);
                                        :}


        |id:c asignacion:d E punto_y_coma:e INICIO {:

                                        // tenemos una lista con los tokens guardados, vamos a intentar sacar al exp reg sabiendo el
                                         //   número de fila y columna del token anterior y posterior a esta
                                        
                                        // acá vamos a extraer los valores de las variables que nos genera el .cup (Archivo Analizador_sintactico. java linea 291 aprox)  
 
                                        int fila = dright;
                                        int col_anterior = dleft;
                                        int col_posterior = eleft;
                                        LinkedList<Token> expre = new LinkedList<Token>(); // Lista te los tokens que conforman una expresion regular

                                        
                                        for (Token tok : Analizador_Lexico.tokens) {
                                            if (tok.linea == fila && tok.columna>col_anterior && tok.columna<col_posterior){
                                                expre.add(tok);
                                            }
                                        }
                                        RegExp nuevo = new RegExp(c.toString(), expre);
                                        expresiones.add(nuevo);
                                            


                                        
                                        //System.out.println(d.value());
                                        //expre = new LinkedList<String>();
                                        //RegExp nuevo = new RegExp(c.toString(), d.toString());
                                        //expresiones.add(nuevo);
                                        :}
        |delimitadores INICIO
        |id:c dos_puntos cadena:d punto_y_coma INICIO{:
                                        cadena nuevo = new cadena(c.toString(), d.toString());
                                        cadenas.add(nuevo);
                                        :}

        |comentario_unilinea INICIO
        |comentario_multilinea INICIO
        |id:c dos_puntos cadena:d punto_y_coma{:
                                        cadena nuevo = new cadena(c.toString(), d.toString());
                                        cadenas.add(nuevo);
                                        :}
        |comentario_unilinea
        |comentario_multilinea
        |delimitadores
;


E::= punto E E                 
    |o_logico E E
    |asterisco E
    |mas E
    |duda E
    |llave_a id llave_c
    |cadena   
;