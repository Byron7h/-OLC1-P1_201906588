package analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;

parser code



{:

    // • Acá vamos a crear una linked list para guardar todos los conjuntos que encontremos
    public static LinkedList<conjunto> conjuntos = new LinkedList<conjunto>(); 
    public static LinkedList<RegExp> expresiones = new LinkedList<RegExp>(); 
    String exp = "";

    //creamos un nuevo objeto linked list
    public static LinkedList<TError> errores = new LinkedList<TError>(); 

    // esta función nata de la herramienta, manda a llamar todos los errores sintacticos
    // necesita un objeto simbolo
   
    public void syntax_error(Symbol s)
    {        

        //obtenemos los valores de los parámetros del objeto s
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
      
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        // error de tipo sintáctico
        TError tmp = new TError("Sintactico",lexema,"Caracter no esperado",fila,columna);
        errores.add(tmp);
        
    }


    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores, se reporta y termina el análisis
    // en caso de que se pueda recurer este no saldrá
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
        TError tmp = new TError("Sintactico",lexema, "Caracter no esperado",fila,columna);
        errores.add(tmp);   
    }
:}

terminal palabra_reservada;
terminal delimitadores;
terminal comentario_unilinea;
terminal comentario_multilinea;
terminal cadena;
terminal asignacion;
terminal id;
terminal conjunto;
terminal coma;
terminal punto_y_coma;
terminal llave_a;
terminal llave_c;
terminal punto;
terminal dos_puntos;
terminal asterisco;
terminal o_logico;
terminal mas;
terminal duda;
terminal exp_reg;

non terminal INICIO;

precedence left id, cadena;

start with INICIO;

INICIO::= llave_a INICIO llave_c  {:System.out.println("Fin de analisis de entrada");:}
        

        |palabra_reservada dos_puntos id:a asignacion conjunto:b punto_y_coma INICIO {:
                                        conjunto nuevo = new conjunto("cadena", a.toString(), b.toString());
                                        conjuntos.add(nuevo);
                                        :}


        |id:c asignacion exp_reg:d punto_y_coma INICIO
                                        {:
                                        //System.out.println(exp);
                                        System.out.println(d.toString());
                                        

                                        //RegExp nuevo = new RegExp(c.value().toString(), d.toString());
                                        //expresiones.add(nuevo);
                                        :}
        |delimitadores INICIO
        |id dos_puntos cadena punto_y_coma INICIO
        |comentario_unilinea INICIO
        |comentario_multilinea INICIO

        |id dos_puntos cadena punto_y_coma
        |comentario_unilinea
        |comentario_multilinea
        |delimitadores
;

